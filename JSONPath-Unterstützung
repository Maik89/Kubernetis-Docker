Die JSONPath-Vorlage besteht aus JSONPath-Ausdrücken, die in geschweifte Klammern {} eingeschlossen sind. Kubectl verwendet JSONPath-Ausdrücke, um nach bestimmten Feldern im JSON-Objekt zu filtern und die Ausgabe zu formatieren. Zusätzlich zur ursprünglichen JSONPath-Vorlagensyntax sind die folgenden Funktionen und die Syntax gültig:

Verwenden Sie doppelte Anführungszeichen, um Text in JSONPath-Ausdrücken in Anführungszeichen zu setzen.
Verwenden Sie die Operatoren , um Listen zu durchlaufen.rangeend
Verwenden Sie negative Slice-Indizes, um eine Liste rückwärts zu durchlaufen. Negative Indizes "umschließen" eine Liste nicht und sind so lange gültig, wie .-index + listLength >= 0
Anmerkung:
Der Operator ist optional, da der Ausdruck standardmäßig immer mit dem Stammobjekt beginnt.$

Das Ergebnisobjekt wird als String()-Funktion ausgegeben.

Bei der JSON-Eingabe:

{
  "kind": "List",
  "items":[
    {
      "kind":"None",
      "metadata":{"name":"127.0.0.1"},
      "status":{
        "capacity":{"cpu":"4"},
        "addresses":[{"type": "LegacyHostIP", "address":"127.0.0.1"}]
      }
    },
    {
      "kind":"None",
      "metadata":{"name":"127.0.0.2"},
      "status":{
        "capacity":{"cpu":"8"},
        "addresses":[
          {"type": "LegacyHostIP", "address":"127.0.0.2"},
          {"type": "another", "address":"127.0.0.3"}
        ]
      }
    }
  ],
  "users":[
    {
      "name": "myself",
      "user": {}
    },
    {
      "name": "e2e",
      "user": {"username": "admin", "password": "secret"}
    }
  ]
}



Funktion	Beschreibung	Beispiel	Ergebnis
text	Der Klartext	kind is {.kind}	kind is List
@	Das aktuelle Objekt	{@}	das gleiche wie Eingabe
. oder []	Untergeordneter Operator	{.kind}oder {['kind']}{['name\.type']}	List
..	Rekursiver Abstieg	{..name}	127.0.0.1 127.0.0.2 myself e2e
*	Platzhalter. Alle Objekte abrufen	{.items[*].metadata.name}	[127.0.0.1 127.0.0.2]
[start:end:step]	tiefgestellter Operator	{.users[0].name}	myself
[,]	Gewerkschaftsbetreiber	{.items[*]['metadata.name', 'status.capacity']}	127.0.0.1 127.0.0.2 map[cpu:4] map[cpu:8]
?()	Filter	{.users[?(@.name=="e2e")].user.password}	secret
range, end	Liste iterieren	{range .items[*]}[{.metadata.name}, {.status.capacity}] {end}	[127.0.0.1, map[cpu:4]] [127.0.0.2, map[cpu:8]]
''	Zitat interpretierte Zeichenfolge	{range .items[*]}{.metadata.name}{'\t'}{end}	127.0.0.1 127.0.0.2
Beispiele für die Verwendung von JSONPath-Ausdrücken:kubectl

kubectl get pods -o json
kubectl get pods -o=jsonpath='{@}'
kubectl get pods -o=jsonpath='{.items[0]}'
kubectl get pods -o=jsonpath='{.items[0].metadata.name}'
kubectl get pods -o=jsonpath="{.items[*]['metadata.name', 'status.capacity']}"
kubectl get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.startTime}{"\n"}{end}'
Anmerkung:
Unter Windows müssen Sie jede JSONPath-Vorlage, die Leerzeichen enthält, in doppelte Anführungszeichen setzen (nicht einfache Anführungszeichen, wie oben für bash gezeigt). Dies wiederum bedeutet, dass Sie ein einfaches Anführungszeichen oder ein mit Escapezeichen versehenes doppeltes Anführungszeichen um alle Literale in der Vorlage verwenden müssen. Zum Beispiel:

kubectl get pods -o=jsonpath="{range .items[*]}{.metadata.name}{'\t'}{.status.startTime}{'\n'}{end}"
kubectl get pods -o=jsonpath="{range .items[*]}{.metadata.name}{\"\t\"}{.status.startTime}{\"\n\"}{end}"
Anmerkung:
Reguläre JSONPath-Ausdrücke werden nicht unterstützt. Wenn Sie einen Abgleich mit regulären Ausdrücken erzielen möchten, können Sie ein Tool wie .jq

# kubectl does not support regular expressions for JSONpath output
# The following command does not work
kubectl get pods -o jsonpath='{.items[?(@.metadata.name=~/^test$/)].metadata.name}'

# The following command achieves the desired result
kubectl get pods -o json | jq -r '.items[] | select(.metadata.name | test("test-")).metadata.name'
